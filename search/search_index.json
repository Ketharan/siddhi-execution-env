{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Execution Extension - Env\n\n\nThe \nsiddhi-execution-env extension\n is an extension to \nSiddhi\n that provides the capability to read environment properties inside Siddhi stream definitions and use it inside queries. Functions of the env extension are as follows..\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.9\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n \ndirectory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.env\n/groupId\n\n        \nartifactId\nsiddhi-execution-env\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\ngetEnvironmentProperty\n \n(Function)\nThis function returns Java environment property corresponding to the key provided\n\n\ngetOriginIPFromXForwarded\n \n(Function)\nThis function returns the public origin IP from the given X-Forwarded header\n\n\ngetSystemProperty\n \n(Function)\nThis function returns the system property pointed by the system property key\n\n\ngetUserAgentProperty\n \n(Function)\nThis function returns the value corresponding to a given property name in a given user agent\n\n\ngetYAMLProperty\n \n(Function)\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\nresourceIdentifier\n \n(Stream Processor)\nThe resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.\n\n\nresourceBatch\n \n(Window)\nA resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to Siddhi Execution Extension - Env"
        }, 
        {
            "location": "/#siddhi-execution-extension-env", 
            "text": "The  siddhi-execution-env extension  is an extension to  Siddhi  that provides the capability to read environment properties inside Siddhi stream definitions and use it inside queries. Functions of the env extension are as follows..  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "Siddhi Execution Extension - Env"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.9 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  \ndirectory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.execution.env /groupId \n         artifactId siddhi-execution-env /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "getEnvironmentProperty   (Function) This function returns Java environment property corresponding to the key provided  getOriginIPFromXForwarded   (Function) This function returns the public origin IP from the given X-Forwarded header  getSystemProperty   (Function) This function returns the system property pointed by the system property key  getUserAgentProperty   (Function) This function returns the value corresponding to a given property name in a given user agent  getYAMLProperty   (Function) This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  resourceIdentifier   (Stream Processor) The resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.  resourceBatch   (Window) A resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.9/", 
            "text": "API Docs - v1.0.9\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetOriginIPFromXForwarded \n(Function)\n\n\nThis function returns the public origin IP from the given X-Forwarded header\n\n\n\nSyntax\n\n\nSTRING\n env:getOriginIPFromXForwarded(\nSTRING\n xforwardedheader)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nxforwardedheader\n\n        \nX-Forwarded-For header of the request\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;\n\n\n\n\nThis query returns the public origin IP from the given X-Forwarded header\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream\n\n\n\nresourceIdentifier \n(Stream Processor)\n\n\nThe resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.\n\n\n\nSyntax\n\n\nenv:resourceIdentifier(\nSTRING\n resource.group.id)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThese are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.\n\n\n\nresourceBatch \n(Window)\n\n\nA resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.\n\n\n\nSyntax\n\n\nenv:resourceBatch(\nSTRING\n resource.group.id, \nINT|LONG|FLOAT|BOOL|DOUBLE\n correlation.id, \nINT|LONG|TIME\n time.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe attribute that should be used for event correlation.\n\n        \n\n        \nINT\nLONG\nFLOAT\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.in.milliseconds\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \n300000\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThis example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions.\nUse Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'.\nIn the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules.\nTo address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs.\nTo aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value.\nInput 1: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 5,\n\"width\": 10\n}\n}\nOutput 1:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"false\"\n}\n}\nInput 2: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 10,\n\"width\": 20\n}\n}\nOutput 2:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"true\"\n}\n}", 
            "title": "1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#api-docs-v109", 
            "text": "", 
            "title": "API Docs - v1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.9/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getoriginipfromxforwarded-function", 
            "text": "This function returns the public origin IP from the given X-Forwarded header  Syntax  STRING  env:getOriginIPFromXForwarded( STRING  xforwardedheader)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         xforwardedheader \n         X-Forwarded-For header of the request \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;  This query returns the public origin IP from the given X-Forwarded header", 
            "title": "getOriginIPFromXForwarded (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.9/#resourceidentifier-stream-processor", 
            "text": "The resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.  Syntax  env:resourceIdentifier( STRING  resource.group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  These are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.", 
            "title": "resourceIdentifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/#resourcebatch-window", 
            "text": "A resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.  Syntax  env:resourceBatch( STRING  resource.group.id,  INT|LONG|FLOAT|BOOL|DOUBLE  correlation.id,  INT|LONG|TIME  time.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n     \n     \n         correlation.id \n         The attribute that should be used for event correlation. \n         \n         INT LONG FLOAT BOOL DOUBLE \n         No \n         No \n     \n     \n         time.in.milliseconds \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         300000 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  This example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions. Use Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'. In the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules. To address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs. To aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value. Input 1: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 5, \"width\": 10 } } Output 1:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"false\" } } Input 2: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 10, \"width\": 20 } } Output 2:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"true\" } }", 
            "title": "resourceBatch (Window)"
        }, 
        {
            "location": "/api/1.0.8/", 
            "text": "API Docs - v1.0.8\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetOriginIPFromXForwarded \n(Function)\n\n\nThis function returns the public origin IP from the given X-Forwarded header\n\n\n\nSyntax\n\n\nSTRING\n env:getOriginIPFromXForwarded(\nSTRING\n xforwardedheader)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nxforwardedheader\n\n        \nX-Forwarded-For header of the request\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;\n\n\n\n\nThis query returns the public origin IP from the given X-Forwarded header\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream\n\n\n\nresourceIdentifier \n(Stream Processor)\n\n\nThe resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.\n\n\n\nSyntax\n\n\nenv:resourceIdentifier(\nSTRING\n resource.group.id)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThese are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.\n\n\n\nresourceBatch \n(Window)\n\n\nA resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.\n\n\n\nSyntax\n\n\nenv:resourceBatch(\nSTRING\n resource.group.id, \nINT|LONG|FLOAT|BOOL|DOUBLE\n correlation.id, \nINT|LONG|TIME\n time.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe attribute that should be used for event correlation.\n\n        \n\n        \nINT\nLONG\nFLOAT\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.in.milliseconds\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \n300000\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThis example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions.\nUse Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'.\nIn the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules.\nTo address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs.\nTo aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value.\nInput 1: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 5,\n\"width\": 10\n}\n}\nOutput 1:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"false\"\n}\n}\nInput 2: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 10,\n\"width\": 20\n}\n}\nOutput 2:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"true\"\n}\n}", 
            "title": "1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#api-docs-v108", 
            "text": "", 
            "title": "API Docs - v1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.8/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getoriginipfromxforwarded-function", 
            "text": "This function returns the public origin IP from the given X-Forwarded header  Syntax  STRING  env:getOriginIPFromXForwarded( STRING  xforwardedheader)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         xforwardedheader \n         X-Forwarded-For header of the request \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;  This query returns the public origin IP from the given X-Forwarded header", 
            "title": "getOriginIPFromXForwarded (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.8/#resourceidentifier-stream-processor", 
            "text": "The resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.  Syntax  env:resourceIdentifier( STRING  resource.group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  These are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.", 
            "title": "resourceIdentifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/#resourcebatch-window", 
            "text": "A resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.  Syntax  env:resourceBatch( STRING  resource.group.id,  INT|LONG|FLOAT|BOOL|DOUBLE  correlation.id,  INT|LONG|TIME  time.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n     \n     \n         correlation.id \n         The attribute that should be used for event correlation. \n         \n         INT LONG FLOAT BOOL DOUBLE \n         No \n         No \n     \n     \n         time.in.milliseconds \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         300000 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  This example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions. Use Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'. In the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules. To address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs. To aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value. Input 1: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 5, \"width\": 10 } } Output 1:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"false\" } } Input 2: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 10, \"width\": 20 } } Output 2:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"true\" } }", 
            "title": "resourceBatch (Window)"
        }, 
        {
            "location": "/api/1.0.7/", 
            "text": "API Docs - v1.0.7\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetOriginIPFromXForwarded \n(Function)\n\n\nThis function returns the public origin IP from the given X-Forwarded header\n\n\n\nSyntax\n\n\nSTRING\n env:getOriginIPFromXForwarded(\nSTRING\n xforwardedheader)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nxforwardedheader\n\n        \nX-Forwarded-For header of the request\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;\n\n\n\n\nThis query returns the public origin IP from the given X-Forwarded header\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream\n\n\n\nresourceIdentifier \n(Stream Processor)\n\n\nThe resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.\n\n\n\nSyntax\n\n\nenv:resourceIdentifier(\nSTRING\n resource.group.id)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThese are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.\n\n\n\nresourceBatch \n(Window)\n\n\nA resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.\n\n\n\nSyntax\n\n\nenv:resourceBatch(\nSTRING\n resource.group.id, \nINT|LONG|FLOAT|BOOL|DOUBLE\n correlation.id, \nINT|LONG|TIME\n time.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe attribute that should be used for event correlation.\n\n        \n\n        \nINT\nLONG\nFLOAT\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.in.milliseconds\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \n300000\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThis example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions.\nUse Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'.\nIn the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules.\nTo address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs.\nTo aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value.\nInput 1: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 5,\n\"width\": 10\n}\n}\nOutput 1:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"false\"\n}\n}\nInput 2: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 10,\n\"width\": 20\n}\n}\nOutput 2:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"true\"\n}\n}", 
            "title": "1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.7/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getoriginipfromxforwarded-function", 
            "text": "This function returns the public origin IP from the given X-Forwarded header  Syntax  STRING  env:getOriginIPFromXForwarded( STRING  xforwardedheader)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         xforwardedheader \n         X-Forwarded-For header of the request \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;  This query returns the public origin IP from the given X-Forwarded header", 
            "title": "getOriginIPFromXForwarded (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.7/#resourceidentifier-stream-processor", 
            "text": "The resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.  Syntax  env:resourceIdentifier( STRING  resource.group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  These are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.", 
            "title": "resourceIdentifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/#resourcebatch-window", 
            "text": "A resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.  Syntax  env:resourceBatch( STRING  resource.group.id,  INT|LONG|FLOAT|BOOL|DOUBLE  correlation.id,  INT|LONG|TIME  time.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n     \n     \n         correlation.id \n         The attribute that should be used for event correlation. \n         \n         INT LONG FLOAT BOOL DOUBLE \n         No \n         No \n     \n     \n         time.in.milliseconds \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         300000 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  This example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions. Use Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'. In the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules. To address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs. To aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value. Input 1: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 5, \"width\": 10 } } Output 1:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"false\" } } Input 2: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 10, \"width\": 20 } } Output 2:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"true\" } }", 
            "title": "resourceBatch (Window)"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetOriginIPFromXForwarded \n(Function)\n\n\nThis function returns the public origin IP from the given X-Forwarded header\n\n\n\nSyntax\n\n\nSTRING\n env:getOriginIPFromXForwarded(\nSTRING\n xforwardedheader)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nxforwardedheader\n\n        \nX-Forwarded-For header of the request\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;\n\n\n\n\nThis query returns the public origin IP from the given X-Forwarded header\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream\n\n\n\nresourceIdentifier \n(Stream Processor)\n\n\nThe resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.\n\n\n\nSyntax\n\n\nenv:resourceIdentifier(\nSTRING\n resource.group.id)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThese are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.\n\n\n\nresourceBatch \n(Window)\n\n\nA resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.\n\n\n\nSyntax\n\n\nenv:resourceBatch(\nSTRING\n resource.group.id, \nINT|LONG|FLOAT|BOOL|DOUBLE\n correlation.id, \nINT|LONG|TIME\n time.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe attribute that should be used for event correlation.\n\n        \n\n        \nINT\nLONG\nFLOAT\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.in.milliseconds\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \n300000\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThis example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions.\nUse Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'.\nIn the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules.\nTo address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs.\nTo aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value.\nInput 1: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 5,\n\"width\": 10\n}\n}\nOutput 1:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"false\"\n}\n}\nInput 2: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 10,\n\"width\": 20\n}\n}\nOutput 2:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"true\"\n}\n}", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.6/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getoriginipfromxforwarded-function", 
            "text": "This function returns the public origin IP from the given X-Forwarded header  Syntax  STRING  env:getOriginIPFromXForwarded( STRING  xforwardedheader)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         xforwardedheader \n         X-Forwarded-For header of the request \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;  This query returns the public origin IP from the given X-Forwarded header", 
            "title": "getOriginIPFromXForwarded (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.6/#resourceidentifier-stream-processor", 
            "text": "The resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.  Syntax  env:resourceIdentifier( STRING  resource.group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  These are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.", 
            "title": "resourceIdentifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.6/#resourcebatch-window", 
            "text": "A resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.  Syntax  env:resourceBatch( STRING  resource.group.id,  INT|LONG|FLOAT|BOOL|DOUBLE  correlation.id,  INT|LONG|TIME  time.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n     \n     \n         correlation.id \n         The attribute that should be used for event correlation. \n         \n         INT LONG FLOAT BOOL DOUBLE \n         No \n         No \n     \n     \n         time.in.milliseconds \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         300000 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  This example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions. Use Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'. In the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules. To address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs. To aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value. Input 1: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 5, \"width\": 10 } } Output 1:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"false\" } } Input 2: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 10, \"width\": 20 } } Output 2:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"true\" } }", 
            "title": "resourceBatch (Window)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetOriginIPFromXForwarded \n(Function)\n\n\nThis function returns the public origin IP from the given X-Forwarded header\n\n\n\nSyntax\n\n\nSTRING\n env:getOriginIPFromXForwarded(\nSTRING\n xforwardedheader)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nxforwardedheader\n\n        \nX-Forwarded-For header of the request\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;\n\n\n\n\nThis query returns the public origin IP from the given X-Forwarded header\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream\n\n\n\nresourceIdentifier \n(Stream Processor)\n\n\nThe resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.\n\n\n\nSyntax\n\n\nenv:resourceIdentifier(\nSTRING\n resource.group.id)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThese are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.\n\n\n\nresourceBatch \n(Window)\n\n\nA resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.\n\n\n\nSyntax\n\n\nenv:resourceBatch(\nSTRING\n resource.group.id, \nINT|LONG|FLOAT|BOOL|DOUBLE\n correlation.id, \nINT|LONG|TIME\n time.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe attribute that should be used for event correlation.\n\n        \n\n        \nINT\nLONG\nFLOAT\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.in.milliseconds\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \n300000\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThis example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions.\nUse Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'.\nIn the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules.\nTo address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs.\nTo aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value.\nInput 1: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 5,\n\"width\": 10\n}\n}\nOutput 1:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"false\"\n}\n}\nInput 2: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 10,\n\"width\": 20\n}\n}\nOutput 2:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"true\"\n}\n}", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.5/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getoriginipfromxforwarded-function", 
            "text": "This function returns the public origin IP from the given X-Forwarded header  Syntax  STRING  env:getOriginIPFromXForwarded( STRING  xforwardedheader)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         xforwardedheader \n         X-Forwarded-For header of the request \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;  This query returns the public origin IP from the given X-Forwarded header", 
            "title": "getOriginIPFromXForwarded (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.5/#resourceidentifier-stream-processor", 
            "text": "The resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.  Syntax  env:resourceIdentifier( STRING  resource.group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  These are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.", 
            "title": "resourceIdentifier (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.5/#resourcebatch-window", 
            "text": "A resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.  Syntax  env:resourceBatch( STRING  resource.group.id,  INT|LONG|FLOAT|BOOL|DOUBLE  correlation.id,  INT|LONG|TIME  time.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n     \n     \n         correlation.id \n         The attribute that should be used for event correlation. \n         \n         INT LONG FLOAT BOOL DOUBLE \n         No \n         No \n     \n     \n         time.in.milliseconds \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         300000 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  This example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions. Use Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'. In the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules. To address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs. To aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value. Input 1: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 5, \"width\": 10 } } Output 1:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"false\" } } Input 2: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 10, \"width\": 20 } } Output 2:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"true\" } }", 
            "title": "resourceBatch (Window)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetOriginIPFromXForwarded \n(Function)\n\n\nThis function returns the public origin IP from the given X-Forwarded header\n\n\n\nSyntax\n\n\nSTRING\n env:getOriginIPFromXForwarded(\nSTRING\n xforwardedheader)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nxforwardedheader\n\n        \nX-Forwarded-For header of the request\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;\n\n\n\n\nThis query returns the public origin IP from the given X-Forwarded header\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.4/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getoriginipfromxforwarded-function", 
            "text": "This function returns the public origin IP from the given X-Forwarded header  Syntax  STRING  env:getOriginIPFromXForwarded( STRING  xforwardedheader)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         xforwardedheader \n         X-Forwarded-For header of the request \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;  This query returns the public origin IP from the given X-Forwarded header", 
            "title": "getOriginIPFromXForwarded (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.3/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.2/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.2/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.2/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.1/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.1/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.1/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/1.0.0/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/1.0.0/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/1.0.0/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.9\n\n\nEnv\n\n\ngetEnvironmentProperty \n(Function)\n\n\nThis function returns Java environment property corresponding to the key provided\n\n\n\nSyntax\n\n\nSTRING\n env:getEnvironmentProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetOriginIPFromXForwarded \n(Function)\n\n\nThis function returns the public origin IP from the given X-Forwarded header\n\n\n\nSyntax\n\n\nSTRING\n env:getOriginIPFromXForwarded(\nSTRING\n xforwardedheader)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nxforwardedheader\n\n        \nX-Forwarded-For header of the request\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;\n\n\n\n\nThis query returns the public origin IP from the given X-Forwarded header\n\n\n\ngetSystemProperty \n(Function)\n\n\nThis function returns the system property pointed by the system property key\n\n\n\nSyntax\n\n\nSTRING\n env:getSystemProperty(\nSTRING\n key, \nSTRING\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream\n\n\n\ngetUserAgentProperty \n(Function)\n\n\nThis function returns the value corresponding to a given property name in a given user agent\n\n\n\nSyntax\n\n\nSTRING\n env:getUserAgentProperty(\nSTRING\n user.agent, \nSTRING\n property.name)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuser.agent\n\n        \nThis specifies the user agent from which property will be extracted.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nproperty.name\n\n        \nThis specifies property name which should be extracted. Supported property names are \n'browser'\n, \n'os'\n and \n'device'\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nregexFilePath\n\n        \nLocation of the yaml file which contains the regex to process the user agent. \n\n        \nDefault regexes included in the ua_parser library\n\n        \nN/A\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent, \nbrowser\n) as functionOutput \ninsert into OutputStream;\n\n\n\n\nThis query returns browser name of the userAgent from UserAgentStream as \nfunctionOutput\n to the OutputStream\n\n\n\ngetYAMLProperty \n(Function)\n\n\nThis function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n env:getYAMLProperty(\nSTRING\n key, \nSTRING\n data.type, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n default.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nkey\n\n        \nThis specifies Key of the property to be read.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndata.type\n\n        \nA string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool.\n\n        \nstring\n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault.value\n\n        \nThis specifies the default Value to be returned if the property value is not available.\n\n        \nnull\n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;\n\n\n\n\nThis query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream\n\n\n\nresourceIdentifier \n(Stream Processor)\n\n\nThe resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.\n\n\n\nSyntax\n\n\nenv:resourceIdentifier(\nSTRING\n resource.group.id)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThese are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.\n\n\n\nresourceBatch \n(Window)\n\n\nA resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.\n\n\n\nSyntax\n\n\nenv:resourceBatch(\nSTRING\n resource.group.id, \nINT|LONG|FLOAT|BOOL|DOUBLE\n correlation.id, \nINT|LONG|TIME\n time.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nresource.group.id\n\n        \nThe resource group name.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe attribute that should be used for event correlation.\n\n        \n\n        \nINT\nLONG\nFLOAT\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.in.milliseconds\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \n300000\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier(\nrule-group-1\n)\nselect productId, if(height == 5 \n width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch(\nrule-group-1\n, productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;\n\n\n\n\nThis example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions.\nUse Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'.\nIn the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules.\nTo address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs.\nTo aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value.\nInput 1: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 5,\n\"width\": 10\n}\n}\nOutput 1:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"false\"\n}\n}\nInput 2: [SweetProductDefectsDetector]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"colorCode\":\"FF0000\",\n\"height\": 10,\n\"width\": 20\n}\n}\nOutput 2:[SweetProductDefectAlert]\n{  \n\"event\":{  \n\"productId\":\"Cake\",\n\"isDefected\":\"true\"\n}\n}", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v109", 
            "text": "", 
            "title": "API Docs - v1.0.9"
        }, 
        {
            "location": "/api/latest/#env", 
            "text": "", 
            "title": "Env"
        }, 
        {
            "location": "/api/latest/#getenvironmentproperty-function", 
            "text": "This function returns Java environment property corresponding to the key provided  Syntax  STRING  env:getEnvironmentProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getEnvironmentProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns Java environment property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getEnvironmentProperty (Function)"
        }, 
        {
            "location": "/api/latest/#getoriginipfromxforwarded-function", 
            "text": "This function returns the public origin IP from the given X-Forwarded header  Syntax  STRING  env:getOriginIPFromXForwarded( STRING  xforwardedheader)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         xforwardedheader \n         X-Forwarded-For header of the request \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (xForwardedHeader string);\nfrom InputStream select env:getOriginIPFromXForwarded(xForwardedHeader) as originIP \ninsert into OutputStream;  This query returns the public origin IP from the given X-Forwarded header", 
            "title": "getOriginIPFromXForwarded (Function)"
        }, 
        {
            "location": "/api/latest/#getsystemproperty-function", 
            "text": "This function returns the system property pointed by the system property key  Syntax  STRING  env:getSystemProperty( STRING  key,  STRING  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream env:getSystemProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns system property corresponding to the key from keyStream as FunctionOutput to the outputStream", 
            "title": "getSystemProperty (Function)"
        }, 
        {
            "location": "/api/latest/#getuseragentproperty-function", 
            "text": "This function returns the value corresponding to a given property name in a given user agent  Syntax  STRING  env:getUserAgentProperty( STRING  user.agent,  STRING  property.name)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         user.agent \n         This specifies the user agent from which property will be extracted. \n         \n         STRING \n         No \n         No \n     \n     \n         property.name \n         This specifies property name which should be extracted. Supported property names are  'browser' ,  'os'  and  'device' . \n         \n         STRING \n         No \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         regexFilePath \n         Location of the yaml file which contains the regex to process the user agent.  \n         Default regexes included in the ua_parser library \n         N/A \n       Examples  EXAMPLE 1  define stream UserAgentStream (userAgent string);\nfrom UserAgentStream \nselect env:getUserAgentProperty(userAgent,  browser ) as functionOutput \ninsert into OutputStream;  This query returns browser name of the userAgent from UserAgentStream as  functionOutput  to the OutputStream", 
            "title": "getUserAgentProperty (Function)"
        }, 
        {
            "location": "/api/latest/#getyamlproperty-function", 
            "text": "This function returns the YAML property requested or the default values specified if such avariable is not available in the deployment.yaml  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  env:getYAMLProperty( STRING  key,  STRING  data.type,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  default.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         key \n         This specifies Key of the property to be read. \n         \n         STRING \n         No \n         No \n     \n     \n         data.type \n         A string constant parameter expressing the data type of the propertyusing one of the following string values: int, long, float, double, string, bool. \n         string \n         STRING \n         No \n         No \n     \n     \n         default.value \n         This specifies the default Value to be returned if the property value is not available. \n         null \n         INT LONG DOUBLE FLOAT STRING BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream keyStream (key string);\nfrom keyStream  env:getYAMLProperty(key) as FunctionOutput \ninsert into outputStream;  This query returns corresponding YAML property for the corresponding key from keyStream as FunctionOutput to the outputStream", 
            "title": "getYAMLProperty (Function)"
        }, 
        {
            "location": "/api/latest/#resourceidentifier-stream-processor", 
            "text": "The resource identify stream processor registering the resource name with reference in static map. And serve static resources count for specific resource name.  Syntax  env:resourceIdentifier( STRING  resource.group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  These are two rule base queries, which processing the same events from the SweetProductDefectsDetector and output the process results into same stream DefectDetectionResult. Also, the queries like this can be newly introduce into Siddhi Application and the number of output events(in DefectDetectionResult) depends on the number of available queries. If we need to further aggregate results for particular correlation.id: productId from the DefectDetectionResult stream, follow-up queries should wait for events with same correlation.id from all these available queries. For that future queries should know the number of events which can expect from these 'rule' base queries for given correlation id.To address this requirement, in above example, we have defined the resource identifier with 'resource.group.id: rule-group-1' in both the 'rule' queries, so that the other extensions can be used the number of registered resource 'rule-group-1' count for their internal processing. Here the 'defect_analyzer' query has env:resourceBatch window where it uses registered resource 'rule-group-1' count to determine the event waiting condition for events from DefectDetectionResult stream.", 
            "title": "resourceIdentifier (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#resourcebatch-window", 
            "text": "A resource batch (tumbling) window that holds a number of events with specified attribute as grouping key and based on the resource count inferred from env:resourceIdentifier extension. The window is updated each time a batch of events with same key value that equals the number of resources count.  Syntax  env:resourceBatch( STRING  resource.group.id,  INT|LONG|FLOAT|BOOL|DOUBLE  correlation.id,  INT|LONG|TIME  time.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         resource.group.id \n         The resource group name. \n         \n         STRING \n         No \n         No \n     \n     \n         correlation.id \n         The attribute that should be used for event correlation. \n         \n         INT LONG FLOAT BOOL DOUBLE \n         No \n         No \n     \n     \n         time.in.milliseconds \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         300000 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream SweetProductDefectsDetector(productId string, colorCode string, height long, width long);\ndefine stream SweetProductDefectAlert(productId string, isDefected bool);\n\n@info(name='product_color_code_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(colorCode == '#FF0000', true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='product_dimensions_rule') \nfrom SweetProductDefectsDetector#env:resourceIdentifier( rule-group-1 )\nselect productId, if(height == 5   width ==10, true, false) as isValid\ninsert into DefectDetectionResult;\n\n@info(name='defect_analyzer') \nfrom DefectDetectionResult#window.env:resourceBatch( rule-group-1 , productId, 60000)\nselect productId, and(not isValid) as isDefected\ninsert into SweetProductDefectAlert;  This example demonstrate the usage of 'env:resourceBatch' widow extension with 'env:resourceIdentifier' stream processor and 'and' attribute aggregator extensions. Use Case: The SweetProductDefectsDetector gets the Sweet Production data as an input stream and each event will be sent to the 'rule' queries( 'product_color_code_rule' and 'product_dimensions_rule') . The query 'defect_analyzer' should wait for both the output results from the 'rule' queries output and based on the aggregated results(take the logical AND aggregation of the 'isValid' attribute both events from 'product_color_code_rule' and 'product_dimensions_rule'), generate events and insert into the output stream  'SweetProductDefectAlert'. In the above example, a number of 'rule' queries can be changed and the 'defect_analyzer' query should wait for results from the all available rules. To address this use case, we have defined the same resource.group.id: rule-group-1 in all the 'rule' queries, and its registering the resources using 'resourceIdentifier' extension.  In the 'defect_analyzer' query we defined the env:resourceBatch(\"rule-group-1\", productId, 2000) window as it will accumulating the events with correlation.id:productId, where it holds the events for same 'productId' until it matches the number of available \"rule-group-1\" resources or flushing the events if the timeout(time.in.milliseconds:2000) occurs. To aggregate the results from 'rule' queries, we have used 'and(not isValid)' attribute aggregator where it logically computes AND operation of not isValid boolean attribute values and outputs the results as a boolean value. Input 1: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 5, \"width\": 10 } } Output 1:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"false\" } } Input 2: [SweetProductDefectsDetector] {   \"event\":{   \"productId\":\"Cake\", \"colorCode\":\"FF0000\", \"height\": 10, \"width\": 20 } } Output 2:[SweetProductDefectAlert] {   \"event\":{   \"productId\":\"Cake\", \"isDefected\":\"true\" } }", 
            "title": "resourceBatch (Window)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2018 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}